{"version":3,"sources":["components/typeahead-cogoport.js","search/filter.js","App.js","serviceWorker.js","index.js"],"names":["TypeAhead","options","_this","props","results","map","q","react_default","a","createElement","key","name","id","this","Component","Filter","state","error","query","helpText","getData","_callee","regenerator_default","wrap","_context","prev","next","axios","get","concat","then","_ref2","data","setState","console","log","catch","stop","handleChange","search","value","length","_this2","placeholder","ref","input","onChange","list","className","typeahead_cogoport","App","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAmBeA,6MAfXC,QAAU,kBAAMC,EAAKC,MAAMC,QAAQC,IAAI,SAAAC,GAAC,OACpCC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAEK,MACVL,EAAEK,iFAKP,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAUG,GAAG,eAAeC,KAAKZ,mBAXzBa,aCoDTC,6MA/CXC,MAAQ,CACJC,OAAO,EACPC,MAAO,GACPd,QAAS,GACTe,SAAU,MAGdC,6BAAU,SAAAC,IAAA,OAAAC,EAAAd,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACAC,IAAMC,IAAN,yCAAAC,OAAmD3B,EAAKc,MAAME,QAC/DY,KAAK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACL9B,EAAK+B,SAAS,CACV7B,QAAS4B,IAEbE,QAAQC,IAAIjC,EAAKc,MAAMZ,WAE1BgC,MAAM,kBAAMlC,EAAK+B,SAAS,CAAEhB,OAAO,EAAME,SAAU,uBARlD,wBAAAK,EAAAa,SAAAhB,EAAAR,WAYVyB,aAAe,WACXpC,EAAK+B,SAAS,CACVf,MAAOhB,EAAKqC,OAAOC,MACnBrB,SAAU,IACX,WACKjB,EAAKc,MAAME,OAAShB,EAAKc,MAAME,MAAMuB,OAAS,GAC1CvC,EAAKkB,qFAKZ,IAAAsB,EAAA7B,KACL,OACIN,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SACIkC,YAAY,cACZC,IAAK,SAAAC,GAAK,OAAIH,EAAKH,OAASM,GAC5BC,SAAUjC,KAAKyB,aACfS,KAAK,cACLC,UAAU,mBAEdzC,EAAAC,EAAAC,cAACwC,EAAD,CAAW7C,QAASS,KAAKG,MAAMZ,UAC/BG,EAAAC,EAAAC,cAAA,KAAGuC,UAAU,uBAAuBnC,KAAKG,MAAMG,kBA3C1CL,aCQNoC,mLANX,OACC3C,EAAAC,EAAAC,cAAC0C,EAAD,aAHarC,aCOEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.f7027517.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TypeAhead extends Component {\n\n    options = () => this.props.results.map(q => (\n        <option key={q.name}>\n            {q.name}\n        </option>\n    ))\n\n    render() {\n        return (\n            <div>\n                <datalist id=\"countryList\">{this.options()}</datalist>\n            </div>\n        );\n    }\n}\n\nexport default TypeAhead;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport TypeAhead from '../components/typeahead-cogoport';\n\nclass Filter extends Component {\n    \n    state = {\n        error: false,\n        query: '',\n        results: [],\n        helpText: ''\n    }\n\n    getData = async () => {\n        await axios.get(`https://restcountries.eu/rest/v2/name/${this.state.query}`)\n            .then(({ data }) => {\n                this.setState({\n                    results: data\n                })\n                console.log(this.state.results);\n            })\n            .catch(() => this.setState({ error: true, helpText: \"No Results Found\" }))\n\n    }\n\n    handleChange = () => {\n        this.setState({\n            query: this.search.value,\n            helpText: ''\n        }, () => {\n            if (this.state.query && this.state.query.length > 1) {\n                    this.getData()\n            }\n        })\n    }\n\n    render() {\n        return (\n            <form>\n                <input\n                    placeholder=\"Search here\"\n                    ref={input => this.search = input}\n                    onChange={this.handleChange}\n                    list=\"countryList\"\n                    className=\"cogoport-input\"\n                />\n                <TypeAhead results={this.state.results}/>\n                <p className=\"cogoport-no-results\">{this.state.helpText}</p>\n            </form>\n        )\n    }\n}\n\nexport default Filter;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Filter from './search/filter';\n\nclass App extends Component {\n  render() {\n    return (\n     <Filter />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}